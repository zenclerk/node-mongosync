// Generated by CoffeeScript 1.10.0
(function() {
  var Logger,
    slice = [].slice;

  Logger = (function() {
    function Logger(loglv) {
      this.definition = {
        error: 20,
        info: 40,
        verbose: 60,
        trace: 80,
        debug: 100
      };
      this.setLoglv(loglv);
    }

    Logger.prototype.setLoglv = function(loglv) {
      this.lv = this.definition[loglv];
      return this.lv || (this.lv = this.definition['info']);
    };

    Logger.prototype.log = function() {
      var args, loglv;
      loglv = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      if (this.definition[loglv] > this.lv) {
        return;
      }
      return console.log.apply(console, ["[" + loglv + "]:"].concat(slice.call(args)));
    };

    Logger.prototype.error = function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return this.log.apply(this, ['error'].concat(slice.call(args)));
    };

    Logger.prototype.info = function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return this.log.apply(this, ['info'].concat(slice.call(args)));
    };

    Logger.prototype.verbose = function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return this.log.apply(this, ['verbose'].concat(slice.call(args)));
    };

    Logger.prototype.trace = function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return this.log.apply(this, ['trace'].concat(slice.call(args)));
    };

    Logger.prototype.debug = function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return this.log.apply(this, ['debug'].concat(slice.call(args)));
    };

    return Logger;

  })();

  module.exports = Logger;

}).call(this);
